% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function_orderCellsDif.R
\name{orderCellsDif}
\alias{orderCellsDif}
\title{Cell ordering along a trajectory}
\usage{
orderCellsDif(fb, tEnd, coorPlot, clustCells, OriginClusts, DifClusts,
  windowSize = 50, stepSize = 20, cutEndMode = "fit", manifold,
  strengthen = TRUE, strenCells = 50, strenPower = 10,
  colIntensity = c("grey", "gold", "orange", "red", "blue"), endIdx = NULL)
}
\arguments{
\item{fb}{Output object resulting from the fateBias function from FateID. 
#Note: the original FateID package had some issues so I have fixed the function.}

\item{tEnd}{Trajectory to take to order the cells. This should correspond to 
one of the rownames of fb$probs.}

\item{coorPlot}{Matrix or dataframe with 2 columns, corresponding to
the coordinates of the cells in a 2D plot - e.g. PCA, tSNE, FR...-}

\item{clustCells}{Vector specifying the cluster each cell belongs to.
This vector should have the cell names as names.}

\item{OriginClusts}{Clusters to consider as origin. These will be used to 
define where the randomForest classification should no longer be considered.}

\item{DifClusts}{Clusters to consider as differentiated. These will be used to 
define where the randomForest classification should no longer be considered.}

\item{windowSize}{window size to calculate the ratio between the number of
cells belonging to origin clusters and the number of cells belonging to 
the target clusters. Default: 50}

\item{stepSize}{Step size to consider when going through the cells ordered
by the iteration number where they have been classified. This is used when 
calculating the ratio between the number of cells belonging to origin 
clusters and the number of cells belonging to the target clusters.Default: 20}

\item{cutEndMode}{Specify the method with which the cut threshold 
for filtering out the last classified cells should be if endIdx=NULL.
Options: "fit": This will fit a curve with loess and the max point 
of this fit will be chosen. "firstMax": This will take the value 
where the first maximum is achieved. "lastMax": This will take the value 
where the last maximum is achieved. Default: fit.}

\item{manifold}{Matrix or dataframe with cells in rows and features in columns
that is used to calculate the principal curve. This should at least include
the cells belonging to the trajectory of interest. This could be a PCA 
matrix, diffusion map, tSNE, counts...}

\item{strengthen}{Logical. If TRUE, cells belonging to the start and to 
the end of the filtered trajectory - according to the order in fb$trall -
will be repeated n times in the manifold matrix to make sure the 
principal curve goes through them. Default: TRUE}

\item{strenCells}{Numerical. This will be used if strengthen=TRUE.
Number of cells to consider as 'start' and 'end' cells. These cells will
be the ones repeated in the manifold if strengthen=TRUE. Default: 50}

\item{strenPower}{Numerical. This will be used if strengthen=TRUE. Number 
of times to repeat the values of Start and End cells. Default: 10}

\item{colIntensity}{Color key to plot the ordering of the trajectory.
This will be a gradient. Default: "grey","gold","orange","red","blue"}

\item{endIdx}{If one has the end cell along fb$trall already defined, you
can use this parameter to specify its index. Default: NULL. It will calculate
it based on the #Origin/#Target ratio.}
}
\description{
It orders the cells along a trajectory using principal curves. 
For this, it first takes the fb$trall, which has the cells stored in the 
order they have been classified, and takes those cells belonging to the 
tEnd trajectory, keeping the order. With this order, the algorithm calculates
how many cells were assigned to differentiated clusters -specified in DifClusts, 
with reference to clustCells - and also how many cells were assigned to 
undifferentiated clusters - specified in OriginClusts with reference to 
clustCells. Next, it calculates the ratio between them 
- #OriginCells/#Target Cells - and sets a cutoff in the iteration where
there the maximum ratio is found - i.e. this would be when the classification
has reached the area of the undifferentiated state for that target trajectory.
With this filtered subset of cells belonging to this trajectory, the algorithm
then calculates a principal curve fitting these cells. The values used for this
are the ones passed through the 'manifold' parameter. With this principal curve,
the order of the cells in respect to it is calculated.
}
\note{
It starts from a FateID object obtained from the function fateBias.
}
\author{
Blanca Pijuan-Sala.
}
